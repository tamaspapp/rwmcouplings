// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// GCRNHugHop
Rcpp::List GCRNHugHop(const Eigen::Map<Eigen::ArrayXd>& x0, const Eigen::Map<Eigen::ArrayXd>& y0, const Eigen::Map<Eigen::ArrayXd>& hug_params, const Eigen::Map<Eigen::ArrayXd>& hop_params, const int& iter, const int& thin);
RcppExport SEXP _rwmcouplings_GCRNHugHop(SEXP x0SEXP, SEXP y0SEXP, SEXP hug_paramsSEXP, SEXP hop_paramsSEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd>& >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd>& >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd>& >::type hug_params(hug_paramsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd>& >::type hop_params(hop_paramsSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(GCRNHugHop(x0, y0, hug_params, hop_params, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// SetSeed_cpp
void SetSeed_cpp(const int& seed, const int& stream);
RcppExport SEXP _rwmcouplings_SetSeed_cpp(SEXP seedSEXP, SEXP streamSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< const int& >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const int& >::type stream(streamSEXP);
    SetSeed_cpp(seed, stream);
    return R_NilValue;
END_RCPP
}
// SampleLatentVariables
Rcpp::NumericVector SampleLatentVariables(int T, double sig, double phi);
RcppExport SEXP _rwmcouplings_SampleLatentVariables(SEXP TSEXP, SEXP sigSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(SampleLatentVariables(T, sig, phi));
    return rcpp_result_gen;
END_RCPP
}
// svmRWM
Rcpp::List svmRWM(const Eigen::Map<Eigen::ArrayXd> x0, const Eigen::Map<Eigen::ArrayXd> y, const double& beta, const double& sigma, const double& phi, const double& h, const int& iter);
RcppExport SEXP _rwmcouplings_svmRWM(SEXP x0SEXP, SEXP ySEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP hSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(svmRWM(x0, y, beta, sigma, phi, h, iter));
    return rcpp_result_gen;
END_RCPP
}
// svmCRNRWM
Rcpp::List svmCRNRWM(const Eigen::Map<Eigen::ArrayXd> x0, const Eigen::Map<Eigen::ArrayXd> y0, const Eigen::Map<Eigen::ArrayXd> y_data, const double& beta, const double& sigma, const double& phi, const double& h, const int& iter, const int& thin);
RcppExport SEXP _rwmcouplings_svmCRNRWM(SEXP x0SEXP, SEXP y0SEXP, SEXP y_dataSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP hSEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type y_data(y_dataSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(svmCRNRWM(x0, y0, y_data, beta, sigma, phi, h, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// svmReflMaxRWM
Rcpp::List svmReflMaxRWM(const Eigen::Map<Eigen::ArrayXd> x0, const Eigen::Map<Eigen::ArrayXd> y0, const Eigen::Map<Eigen::ArrayXd> y_data, const double& beta, const double& sigma, const double& phi, const double& h, const int& iter, const int& thin);
RcppExport SEXP _rwmcouplings_svmReflMaxRWM(SEXP x0SEXP, SEXP y0SEXP, SEXP y_dataSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP hSEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type y_data(y_dataSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(svmReflMaxRWM(x0, y0, y_data, beta, sigma, phi, h, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// svmTwoScaleGCRNRWM
Rcpp::List svmTwoScaleGCRNRWM(const Eigen::Map<Eigen::ArrayXd> x0, const Eigen::Map<Eigen::ArrayXd> y0, const Eigen::Map<Eigen::ArrayXd> y_data, const double& beta, const double& sigma, const double& phi, const double& h, const int& iter, const int& thin, const double& thresh);
RcppExport SEXP _rwmcouplings_svmTwoScaleGCRNRWM(SEXP x0SEXP, SEXP y0SEXP, SEXP y_dataSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP hSEXP, SEXP iterSEXP, SEXP thinSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type y_data(y_dataSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< const double& >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(svmTwoScaleGCRNRWM(x0, y0, y_data, beta, sigma, phi, h, iter, thin, thresh));
    return rcpp_result_gen;
END_RCPP
}
// svmLaplaceGCRNRWM
Rcpp::List svmLaplaceGCRNRWM(const Eigen::Map<Eigen::VectorXd> x0, const Eigen::Map<Eigen::VectorXd> y0, const Eigen::Map<Eigen::ArrayXd> y_data, const double& beta, const double& sigma, const double& phi, const Eigen::Map<Eigen::VectorXd> mu, const Eigen::Map<Eigen::SparseMatrix<double>> Omega, const Eigen::Map<Eigen::SparseMatrix<double>> Omega_chol, const double& h, const int& iter, const int& thin);
RcppExport SEXP _rwmcouplings_svmLaplaceGCRNRWM(SEXP x0SEXP, SEXP y0SEXP, SEXP y_dataSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP muSEXP, SEXP OmegaSEXP, SEXP Omega_cholSEXP, SEXP hSEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type y_data(y_dataSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double>> >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double>> >::type Omega_chol(Omega_cholSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(svmLaplaceGCRNRWM(x0, y0, y_data, beta, sigma, phi, mu, Omega, Omega_chol, h, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// svmLaplaceCRNRWM
Rcpp::List svmLaplaceCRNRWM(const Eigen::Map<Eigen::VectorXd> x0, const Eigen::Map<Eigen::VectorXd> y0, const Eigen::Map<Eigen::ArrayXd> y_data, const double& beta, const double& sigma, const double& phi, const Eigen::Map<Eigen::VectorXd> mu, const Eigen::Map<Eigen::SparseMatrix<double>> Omega, const Eigen::Map<Eigen::SparseMatrix<double>> Omega_chol, const double& h, const int& iter, const int& thin);
RcppExport SEXP _rwmcouplings_svmLaplaceCRNRWM(SEXP x0SEXP, SEXP y0SEXP, SEXP y_dataSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP muSEXP, SEXP OmegaSEXP, SEXP Omega_cholSEXP, SEXP hSEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type y_data(y_dataSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double>> >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double>> >::type Omega_chol(Omega_cholSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(svmLaplaceCRNRWM(x0, y0, y_data, beta, sigma, phi, mu, Omega, Omega_chol, h, iter, thin));
    return rcpp_result_gen;
END_RCPP
}
// svmLaplaceReflRWM
Rcpp::List svmLaplaceReflRWM(const Eigen::Map<Eigen::VectorXd> x0, const Eigen::Map<Eigen::VectorXd> y0, const Eigen::Map<Eigen::ArrayXd> y_data, const double& beta, const double& sigma, const double& phi, const Eigen::Map<Eigen::VectorXd> mu, const Eigen::Map<Eigen::SparseMatrix<double>> Omega, const Eigen::Map<Eigen::SparseMatrix<double>> Omega_chol, const double& h, const int& iter, const int& thin);
RcppExport SEXP _rwmcouplings_svmLaplaceReflRWM(SEXP x0SEXP, SEXP y0SEXP, SEXP y_dataSEXP, SEXP betaSEXP, SEXP sigmaSEXP, SEXP phiSEXP, SEXP muSEXP, SEXP OmegaSEXP, SEXP Omega_cholSEXP, SEXP hSEXP, SEXP iterSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type y_data(y_dataSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double>> >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::SparseMatrix<double>> >::type Omega_chol(Omega_cholSEXP);
    Rcpp::traits::input_parameter< const double& >::type h(hSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< const int& >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(svmLaplaceReflRWM(x0, y0, y_data, beta, sigma, phi, mu, Omega, Omega_chol, h, iter, thin));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rwmcouplings_GCRNHugHop", (DL_FUNC) &_rwmcouplings_GCRNHugHop, 6},
    {"_rwmcouplings_SetSeed_cpp", (DL_FUNC) &_rwmcouplings_SetSeed_cpp, 2},
    {"_rwmcouplings_SampleLatentVariables", (DL_FUNC) &_rwmcouplings_SampleLatentVariables, 3},
    {"_rwmcouplings_svmRWM", (DL_FUNC) &_rwmcouplings_svmRWM, 7},
    {"_rwmcouplings_svmCRNRWM", (DL_FUNC) &_rwmcouplings_svmCRNRWM, 9},
    {"_rwmcouplings_svmReflMaxRWM", (DL_FUNC) &_rwmcouplings_svmReflMaxRWM, 9},
    {"_rwmcouplings_svmTwoScaleGCRNRWM", (DL_FUNC) &_rwmcouplings_svmTwoScaleGCRNRWM, 10},
    {"_rwmcouplings_svmLaplaceGCRNRWM", (DL_FUNC) &_rwmcouplings_svmLaplaceGCRNRWM, 12},
    {"_rwmcouplings_svmLaplaceCRNRWM", (DL_FUNC) &_rwmcouplings_svmLaplaceCRNRWM, 12},
    {"_rwmcouplings_svmLaplaceReflRWM", (DL_FUNC) &_rwmcouplings_svmLaplaceReflRWM, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_rwmcouplings(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
